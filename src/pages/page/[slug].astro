---
import BlogCard from "@/components/BlogCard.astro";
import Pagination from "@/components/Pagination.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import { getEntry } from "astro:content";

const BLOG_FOLDER = "blog";

const { slug } = Astro.params;
const postIndex = await getEntry(BLOG_FOLDER, "-index");
const posts = await getSinglePage(BLOG_FOLDER);
const sortedPosts = sortByDate(posts);
const totalPages = Math.ceil(posts.length / config.settings.pagination);
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
const indexOfLastPost = currentPage * config.settings.pagination;
const indexOfFirstPost = indexOfLastPost - config.settings.pagination;
const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);

export async function getStaticPaths() {
  const BLOG_FOLDER = "blog";
  const posts = await getSinglePage(BLOG_FOLDER);
  const totalPages = Math.ceil(posts.length / config.settings.pagination);
  const paths = [];

  for (let i = 1; i < totalPages; i++) {
    paths.push({
      params: {
        slug: (i + 1).toString(),
      },
    });
  }
  return paths;
}
---

<Base
  title={postIndex?.data.title}
  meta_title={postIndex?.data.meta_title}
  image={postIndex?.data.image}
  description={postIndex?.data.description}
>
  <section class="section">
    <div class="container">
      <div class="row">
        <!-- blog posts -->
          <div class="row">
            {
              currentPosts.map((post) => (
                  <BlogCard data={post} related={false}/>
              ))
            }
          </div>
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
          />
      </div>
    </div>
  </section>
</Base>
